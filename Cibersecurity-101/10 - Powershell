## ‚ö° Introdu√ß√£o ao PowerShell

Segundo a p√°gina oficial da Microsoft:

> ‚ÄúO PowerShell √© uma solu√ß√£o de automa√ß√£o de tarefas multiplataforma composta por um shell de linha de comando, uma linguagem de script e um framework de gerenciamento de configura√ß√£o.‚Äù

---

## üîß O que √© o PowerShell?

O **PowerShell** √© uma ferramenta poderosa da Microsoft projetada para **automa√ß√£o de tarefas** e **gerenciamento de configura√ß√µes**. Ele combina:

- Uma **interface de linha de comando** (CLI),
- Uma **linguagem de script** baseada no framework .NET,
- E um **framework de gerenciamento de configura√ß√£o**.

Diferente das ferramentas antigas baseadas em texto, o PowerShell √© **orientado a objetos**, o que significa que consegue lidar com dados complexos e interagir com componentes do sistema de maneira muito mais eficaz.

Inicialmente exclusivo do Windows, o PowerShell expandiu recentemente para **macOS** e **Linux**, tornando-se uma op√ß√£o vers√°til para profissionais de TI que trabalham em diferentes sistemas operacionais.

---

## üìú Breve Hist√≥ria do PowerShell

O PowerShell foi desenvolvido para superar as limita√ß√µes das ferramentas de linha de comando e scripts existentes no Windows (como `cmd.exe` e arquivos `.bat`). Com o crescimento do uso do Windows em ambientes corporativos complexos no in√≠cio dos anos 2000, essas ferramentas tradicionais se mostraram insuficientes para automatizar e gerenciar os sistemas de forma eficaz.

**Jeffrey Snover**, engenheiro da Microsoft, percebeu uma diferen√ßa fundamental entre os sistemas Windows e Unix:

- O **Windows** usava dados estruturados e APIs modernas,
- J√° o **Unix** tratava tudo como arquivos de texto.

Essa diferen√ßa tornava impratic√°vel portar ferramentas Unix diretamente para o Windows. A solu√ß√£o de Snover foi desenvolver uma abordagem **orientada a objetos**, combinando a simplicidade dos scripts com o poder do framework .NET.

Lan√ßado em **2006**, o PowerShell permitiu que administradores automatizassem tarefas manipulando objetos ‚Äî oferecendo uma integra√ß√£o profunda com os sistemas Windows.

Com a evolu√ß√£o dos ambientes de TI para incluir v√°rios sistemas operacionais, surgiu a necessidade de uma ferramenta de automa√ß√£o mais vers√°til. Em **2016**, a Microsoft lan√ßou o **PowerShell Core**, uma vers√£o **open-source** e **multiplataforma** que roda no Windows, macOS e Linux.

---

## üí™ O Poder do PowerShell

Para compreender completamente o poder do PowerShell, √© necess√°rio entender o que √© um **objeto** nesse contexto.

Na programa√ß√£o, um **objeto** representa um item com:

- **Propriedades** (caracter√≠sticas), e
- **M√©todos** (a√ß√µes).

Por exemplo, um objeto "carro" pode ter:
- Propriedades: `Cor`, `Modelo`, `N√≠velDeCombust√≠vel`
- M√©todos: `Dirigir()`, `Buzinar()`, `Abastecer()`

No PowerShell, os **objetos** s√£o unidades fundamentais que encapsulam **dados** e **funcionalidades**, facilitando a manipula√ß√£o de informa√ß√µes. Um objeto pode conter:

- Dados como nomes de arquivos, nomes de usu√°rios ou tamanhos (propriedades),
- E fun√ß√µes como copiar um arquivo ou encerrar um processo (m√©todos).

---

## üÜö Texto vs Objeto

No **Prompt de Comando tradicional (cmd.exe)**, os comandos s√£o baseados em texto. Isso significa que a entrada e a sa√≠da de dados s√£o tratadas como **texto simples**, exigindo muitas vezes parsing (an√°lise e convers√£o de texto) para extrair informa√ß√µes √∫teis.

No **PowerShell**, os **cmdlets** (comandos especializados) retornam **objetos** com suas propriedades e m√©todos intactos. Isso permite manipula√ß√µes de dados **mais poderosas e flex√≠veis**, sem a necessidade de analisar ou transformar strings.